{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","showImage","classifying","complete","showPredictions","formatPredictions","className","probability","key","toFixed","reducer","currentState","event","App","useReducer","state","dispatch","useState","model","setModel","imageUrl","setImageUrl","predictions","setPredictions","inputRef","useRef","imageRef","buttonProps","text","action","a","mobilenet","mobilenetModel","current","click","classify","classificationResults","alt","src","ref","map","type","accept","capture","onChange","e","files","target","length","url","URL","createObjectURL","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"0WAIMA,G,MAAe,CACnBC,QAAS,UACTC,OAAQ,CACND,QAAS,CAAEE,GAAI,CAAEC,KAAM,iBACvBC,aAAc,CAAEF,GAAI,CAAEC,KAAM,mBAC5BE,eAAgB,CAAEH,GAAI,CAAEC,KAAM,UAC9BG,MAAO,CAAEJ,GAAI,CAAEC,KAAM,eAAiBI,WAAW,GACjDC,YAAa,CAAEN,GAAI,CAAEC,KAAM,aAC3BM,SAAU,CAAEP,GAAI,CAAEC,KAAM,kBACZI,WAAW,EACXG,iBAAiB,MAI3BC,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OAExB,wBAAIC,IAAKF,GAAT,UACMA,EADN,eACoC,IAAdC,GAAmBE,QAAQ,OAI7CC,EAAU,SAACC,EAAcC,GAAf,OAAyBnB,EAAaE,OAAOgB,GAAcf,GAAGgB,IAAUnB,EAAaC,SA+FtFmB,MA7Ff,WAAe,MAEaC,qBAAWJ,EAASjB,EAAaC,SAF9C,mBAENqB,EAFM,KAECC,EAFD,KAKPnB,EAAO,kBAAMmB,EAAS,SALf,EAQYC,mBAAS,MARrB,mBAQNC,EARM,KAQAC,EARA,OAWkBF,mBAAS,MAX3B,mBAWNG,EAXM,KAWGC,EAXH,OAcwBJ,mBAAS,IAdjC,mBAcNK,EAdM,KAcMC,EAdN,KAiBPC,EAAWC,mBAGXC,EAAWD,mBA4CXE,EAAc,CAClBjC,QAAS,CAAEkC,KAAM,aAAcC,OA1ClB,uCAAG,4BAAAC,EAAA,6DAEhBjC,IAFgB,SAIakC,MAJb,OAIVC,EAJU,OAMhBb,EAASa,GAETnC,IARgB,2CAAH,sDA2CbC,aAAc,CAAE8B,KAAM,mBAAoBC,OAAQ,cAClD9B,eAAgB,CAAE6B,KAAM,eAAgBC,OAAQ,kBAAML,EAASS,QAAQC,UACvElC,MAAO,CAAE4B,KAAM,WAAYC,OArBX,uCAAG,4BAAAC,EAAA,6DAEnBjC,IAFmB,SAIiBqB,EAAMiB,SAAST,EAASO,SAJzC,OAIbG,EAJa,OAKnBb,EAAea,GAEfvC,IAPmB,2CAAH,sDAsBhBK,YAAa,CAAE0B,KAAM,iBAAkBC,OAAQ,cAC/C1B,SAAU,CAAEyB,KAAM,QAASC,OAbf,WACZN,EAAe,IACfF,EAAY,MAEZxB,OA7DW,EAyE0CJ,EAAaE,OAAOoB,GAzE9D,IAyELd,iBAzEK,aAyEcG,uBAzEd,SA2Eb,OACE,6BACGH,GAAa,yBAAKoC,IAAI,iBAAiBC,IAAKlB,EAAUmB,IAAKb,IAC3DtB,GAAmB,4BAAKkB,EAAYkB,IAAInC,IACzC,2BACEoC,KAAK,OACLC,OAAO,UACPC,QAAQ,SACRJ,IAAKf,EACLoB,SAjDoB,SAAAC,GAAM,IACtBC,EAAUD,EAAEE,OAAZD,MAER,GAAIA,EAAME,OAAS,EAAG,CAEpB,IAAMC,EAAMC,IAAIC,gBAAgBL,EAAM,IACtCzB,EAAY4B,GAEZpD,QA2CA,4BAAQuD,QAASzB,EAAYZ,GAAOc,QACjCF,EAAYZ,GAAOa,QCtGRyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAc/D,MACrBgE,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44ce8a49.chunk.js","sourcesContent":["import React, { useReducer, useState, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport './App.css';\n\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: { on: { next: 'loadingModel' } },\n    loadingModel: { on: { next: 'awaitingUpload' } },\n    awaitingUpload: { on: { next: 'ready' } },\n    ready: { on: { next: 'classifying' }, showImage: true },\n    classifying: { on: { next: 'complete' } },\n    complete: { on: { next: 'awaitingUpload' },\n                showImage: true,\n                showPredictions: true }\n  }\n}\n\nconst formatPredictions = ({ className, probability }) => (\n  // Mutiply probality by 100 and fix it to 2 decimal places\n  <li key={className}>\n    {`${className}: %${(probability * 100).toFixed(2)}`}\n  </li>\n)\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  // App state reducer\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n\n  // Dispatch function\n  const next = () => dispatch('next');\n\n  // Model local state, default null\n  const [model,setModel] = useState(null);\n\n  // Image url local state, default null\n  const [imageUrl,setImageUrl] = useState(null);\n\n  // Predictions local state, default empty array\n  const [predictions,setPredictions] = useState([]);\n\n  // File input ref\n  const inputRef = useRef();\n\n  // Image element ref\n  const imageRef = useRef();\n\n  // Load image classifier model\n  const loadModel = async () => {\n    // Trigger state transition from initial to loadingModel state\n    next();\n    // Load model\n    const mobilenetModel = await mobilenet.load();\n    // Set model to state\n    setModel(mobilenetModel);\n    // Trigger state transition from loadingModel state to awaitingUpload state\n    next();\n  }\n\n  // Handle image upload\n  const handleImageUpload = e => {\n    const { files } = e.target;\n    \n    if (files.length > 0) {\n      // Take the first file and get it's url\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      // Trigger state transition from awaitingupload state to ready state\n      next()\n    }\n  }\n\n  const idetifyImage = async () => {\n    // Trigger state transition from ready state to classifying state\n    next()\n    // Classify the image.\n    const classificationResults = await model.classify(imageRef.current);\n    setPredictions(classificationResults);\n    // Trigger state transition from classifying state to complete state\n    next()\n  }\n\n  const reset = () => {\n    setPredictions([]);\n    setImageUrl(null);\n    // Trigger state transition from complete state to awaitingUpload state\n    next()\n  }\n\n  const buttonProps = {\n    initial: { text: 'Load Model', action: loadModel },\n    loadingModel: { text: 'Loading Model...', action: () => { }  },\n    awaitingUpload: { text: 'Upload Photo', action: () => inputRef.current.click()  },\n    ready: { text: 'Identify', action: idetifyImage  },\n    classifying: { text: 'Identifying...', action: () => { }  },\n    complete: { text: 'Reset', action: reset  }\n  }\n\n  const { showImage = false, showPredictions = false } = stateMachine.states[state];\n\n  return (\n    <div>\n      {showImage && <img alt=\"upload-preview\" src={imageUrl} ref={imageRef} />}\n      {showPredictions && <ul>{predictions.map(formatPredictions)}</ul>}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        ref={inputRef}\n        onChange={handleImageUpload}\n      />\n      <button onClick={buttonProps[state].action}>\n        {buttonProps[state].text}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}